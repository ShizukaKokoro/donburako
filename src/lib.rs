//! Donburako
//!
//! データ駆動のワークフローを作成するためのライブラリ。
//! ワークフローは、ノードとエッジから構成される有向グラフで表現される。
//! ノードは、ワークフローのステップを表し、エッジはノード間の依存関係を表す。
//! 依存関係のないノードは並列に実行されるため、ワークフローの実行は効率的に行われる。
//!
//! # 概要
//!
//! ## イメージ
//!
//! 桃太郎が桃の中に入った状態で、川を流れているように、データをコンテナに入れて、ワークフローを流すイメージ。
//!
//! ## コンポーネント
//!
//! ## コンテナ
//!
//! データを格納するためのコンテナ。
//! 中にデータが入っており、エッジを通ってノードに渡される。
//! コンテナは、レジストリに入れられ、次に通るべきエッジをノードから指定されて、次のノードに渡される。
//! コンテナは、ノードごとに生成・破棄されるのではなく、基本的に複製され、データの統合の際と、ワークフローの終了時に破棄される。
//!
//! ### ノード
//!
//! 実行されるタスクを表す。
//! 非同期に実行されるため、 IO や通信などの、 CPU バウンドでない処理を効率的に並列実行できる。
//! CPU バウンドかどうかを判断でき、バウンドしている場合は、ブロッキングスレッドを生成して並列実行する。そうでない場合は、非同期タスクとして実行する。
//! 実行可能になると、ノードはキューに追加され、最大の並列実行数を超えないように実行される。
//! 全てのノードのハンドルを `select!` マクロで一定時間ごとにチェックすることで、ノードの実行状況を監視できる。
//!
//! ### エッジ
//!
//! ノード間の依存関係を表す。
//! データ一つにつき、一つのエッジが存在する。そのデータがどこから来るか、どこに行くかを表す。
//! 一つのノードが複数のエッジを前にも後にも持つことができる。これにより、複数の引数と複数の戻り値を扱うことができる。
//! それぞれ始点と終点が同じかつ、データ型も同じようなエッジを許容する。
//!
//! 通常のエッジの他に、入力エッジと出力エッジがある。
//! 入力エッジは始点を持たないエッジで、レジストリにエッジとデータを登録しておくことで、ワークフローを開始できる。
//! 出力エッジは終点を持たないエッジで、ワークフローの終了を表す。終了後にレジストリのデータを取り出すことで、ワークフローの結果を取得できる。
//!
//! # 今後の展望
//!
//! ロギング、エラーハンドリング、リトライ、タイムアウトなど、ワークフローの実行に必要な機能を追加する。
//! ループと条件分岐をサポートする。

#![warn(missing_docs, rustdoc::missing_crate_level_docs)]
